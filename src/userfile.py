from file_handler import JsonHandler
from display import Display
from helpers import Decorators


class UserFile:
    """Generates UserFile object."""

    def __init__(self, region: list, path: str):
        """Initialises UserFile object with four instance attributes.

        Args:
            region (list): Generated by the select_region() method from
            a Places object.
            path (str): Defined in the User object's path attribute.
        """
        #: str:  defines path to folder within which search
        # results are saved and retrieved.
        self.path: str = path

        #: list: region as selected using the select_region method in a
        # Places object
        self.region: list = region

        #: city: city as selected using the select_city method in a
        # Places object
        self.city: list = []

        #: list of [region, country] or [city, country] saved from past
        # searches. Retrieved from the
        # resources/<user.name>/search_history file.
        self.past_searches: list = JsonHandler.read_json(
            f"{self.path}search_history")

        #: str: defined externally as the level of search(region/city) is made.
        # Determines the file name for lookup and/or save.
        self.searchfile: str = ""

    def retrieve_saved(self, place: list, file_path: str) -> dict:
        """Retrieves content of a previously saved places file.

        Args:
            place (list): [region, country] or [city, country] depending
            on the level of the search.
            file_path (str): defines path to folder within which search
            results are retrieved.

        Returns:
            dict: raw content from location save file.
        """
        content: list = JsonHandler.read_json(file_path)
        retrieved: dict = {}
        for item in content:
            if "City" in item and item["City"] == place:
                retrieved = item
            if "Region" in item and item["Region"] == place:
                retrieved = item
        return retrieved

    def search_and_display_data(self, place: list) -> bool:
        """Retrieves location file content and display content
        if found.

        Args:
            place (list): [region, country] or [city, country] depending
            on the level of the search.

        Returns:
            bool: True if process is successful, False otherwise.
        """
        file_found: bool = False
        path: str = f"{self.path}{self.searchfile}"
        if place in self.past_searches:
            data: dict = self.retrieve_saved(place, path)
            display_result: Display = Display(data)
            display_result.display_saved_data()
            file_found = True
        else:
            file_found = False
        return file_found

    @Decorators.save_and_display_data
    def read_flag_and_save(self, data: dict, flag: str) -> tuple:
        """Saves formatted content into a location file for future lookup.

        Formats retrieved location data into a uniform format and save it
        in a predefined file name for future lookup.
        User's past searches list updated with the latest location search.

        Args:
            data (dict): processed location data from city_info attribute
            from a PoiData object. This is obtained after running the extract()
            and consolidate_categories() methods on the PoiData instance.
            flag (str): obtained from the output of the get_poi method of a
            TripadvisorApi instance. Informs on the level of search
            (region/city) that was conducted during the API search.

        Returns:
            tuple: returns final formatted content and file path for
            save_and_display_data decorator to perform
            save and display of data.
        """
        if flag == "region":
            final_format: dict = {"Region": self.region, "Data": data}
            file_path: str = (
                f"{self.path}{self.region[0]}-{self.region[1]}.json")
            self.past_searches.append(self.region)
            JsonHandler.write_json(
                f"{self.path}search_history", self.past_searches)
        elif flag == "city":
            final_format = {"City": self.city, "Data": data}
            file_path = f"{self.path}{self.city[0]}-{self.city[1]}.json"
            self.past_searches.append(self.city)
            JsonHandler.write_json(
                f"{self.path}search_history", self.past_searches)
        return final_format, file_path
